name: CI to Docker Hub

on:
  push:
    branches: 
      - master
      - main
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2
        
      - name: Set Image Name and Version
        id: prep
        run: |
            echo "::set-output name=DOCKER_IMAGE::${{ github.repository }}"
            echo "::set-output name=VERSION::$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')"

      - name: Set Image Tags
        id: tag
        run: |
            if [[ ${{ steps.prep.outputs.VERSION }} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              TAGS_BASE="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.prep.outputs.VERSION }},${{ steps.prep.outputs.DOCKER_IMAGE }}:latest"
              TAGS_PM2="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.prep.outputs.VERSION }}-pm2,${{ steps.prep.outputs.DOCKER_IMAGE }}:latest-pm2"
              TAGS_TINI="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.prep.outputs.VERSION }}-tini,${{ steps.prep.outputs.DOCKER_IMAGE }}:latest-tini"
            else
              TAGS_BASE="${{ steps.prep.outputs.DOCKER_IMAGE }}:latest"
            fi
            echo "::set-output name=tags-base::${TAGS_BASE}"
            echo "::set-output name=tags-pm2::${TAGS_PM2}"
            echo "::set-output name=tags-tini::${TAGS_TINI}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build & Push Base Image
        id: docker_build_base
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.tags-base }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build & Push PM2 Image
        id: docker_build_pm2
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile-pm2
          push: true
          tags: ${{ steps.tag.outputs.tags-pm2 }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and Push Tini Image
        id: docker_build_tini
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.tags-tini }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          
      - name: Base Image Digest
        run: echo ${{ steps.docker_build_base.outputs.digest }}

      - name: PM2 Image Digest
        run: echo ${{ steps.docker_build_pm2.outputs.digest }}

      - name: Tini Image Digest
        run: echo ${{ steps.docker_build_tini.outputs.digest }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.prep.outputs.VERSION }}
          draft: true
          prerelease: false