name: CI to DockerHub

on:
  push:
    branches: 
      - master
      - main
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo 
        uses: actions/checkout@v2
        
      - name: Update version in version files
        id: update-version
        run: |
          # Bump version
          npm version --no-git-tag-version patch
          # Get new bumped version
          PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
          # Update chart version
          sed -r -i "s/(version:[^*]|appVersion:[^*])([[:alnum:].]*)/\1$PACKAGE_VERSION/g" ./chart/Chart.yaml
          # Output new version for other steps
          echo "::set-output name=version::$PACKAGE_VERSION"

      - name: Commit changes
        uses: EndBug/add-and-commit@v7.2.1
        with:
          message: "v${{ steps.update-version.outputs.version }}"
          tag: "${{ steps.get-version.outputs.version }}"
          push: "origin master --force"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Image Tags
        id: tag
        run: |
            if [[ ${{ steps.update-version.outputs.version }} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              TAGS_BASE="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.update-version.outputs.version }},${{ steps.prep.outputs.DOCKER_IMAGE }}:latest"
              TAGS_PM2="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.update-version.outputs.version }}-pm2,${{ steps.prep.outputs.DOCKER_IMAGE }}:latest-pm2"
              TAGS_TINI="${{ steps.prep.outputs.DOCKER_IMAGE }}:${{ steps.update-version.outputs.version }}-tini,${{ steps.prep.outputs.DOCKER_IMAGE }}:latest-tini"
            else
              TAGS_BASE="${{ steps.prep.outputs.DOCKER_IMAGE }}:latest"
            fi
            echo "::set-output name=tags-base::${TAGS_BASE}"
            echo "::set-output name=tags-pm2::${TAGS_PM2}"
            echo "::set-output name=tags-tini::${TAGS_TINI}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build & Push Base Image
        id: docker_build_base
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.tags-base }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build & Push PM2 Image
        id: docker_build_pm2
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile-pm2
          push: true
          tags: ${{ steps.tag.outputs.tags-pm2 }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and Push Tini Image
        id: docker_build_tini
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.tag.outputs.tags-tini }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.update-version.outputs.version }}
          release_name: Docker Release v${{ steps.update-version.outputs.version }}
          body: |
            The latest version(s) can be launched with:
              - Base: `docker run -d -p 8080:8080 --name docker-node-init --restart always jonfairbanks/docker-node-init:${{ steps.update-version.outputs.version }}`
              - PM2:  `docker run -d -p 8080:8080 --name docker-node-init --restart always jonfairbanks/docker-node-init:${{ steps.update-version.outputs.version }}-pm2`
              - Tini: `docker run -d -p 8080:8080 --name docker-node-init --restart always jonfairbanks/docker-node-init:${{ steps.update-version.outputs.version }}-tini`
          draft: false
          prerelease: false